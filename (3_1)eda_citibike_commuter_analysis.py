# -*- coding: utf-8 -*-
"""(3.1)EDA-citibike_commuter_analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dkms8GOclbGnGtV4Ws1VXybUE31w13ow

## Ridership of Urban Bike Shares: the case of Citi Bike in NYC

![alt text](https://d21xlh2maitm24.cloudfront.net/nyc/01unlock2.JPG?mtime=20160428123800)

---

### OVERVIEW

Bike share programs have been implemented in cities around the world in an effort to address multiple aspects of both city functioning and quality of life for urban populations.  Traffic congestion, public health, community engagement, and air quality have all aspects of city life that could *potentially* be impacted by the introduction of a bike share program into a community.

One particularly massive bike share is New York City's [Citi Bike](https://www.citibikenyc.com/) program.  The area coverage of this program is large (extending into New Jersey across the Hudson River) and ridership initial adoption rates – as measured by the number of rides taken – were promising.  However this program has not been without controversy and there has been active discussion regarding which communities ara actually being served and which are not, who is benefitting from the availability of bikes, how they are being used for recreational vs commuter purposes, etc.

The goal of this assignment is two-fold: first, you will learn to work with basic tabular data from the Citi Bike program and second, you will generate a simple estimate for the <u>which age group is predominantly using citi bikes for commuter travel</u>.

<br>

---

### **PART 1 - Background**

Good data science (and data analysis more generally) as well as the appropriate application of machine learning algorithms depends on a clear understanding of the underlying problem/situation, the methods by which the data you are about to analyze are collected, and the situational context in which that data sits.  To that end:

<b>

Read through the following resources (including links within) regarding the Citi Bike program and its impacts in NYC,

1. [official Citi Bike site](https://citibikenyc.com/)

2. [DOT Facts on Citi Bike](https://www.nyc.gov/html/dot/html/pr2013/facts-on-citi-bike.shtml)

3. [Cycling in the City](https://www.nyc.gov/html/dot/downloads/pdf/cycling-in-the-city-2020.pdf)

4. [The Rise of Citi Bikes in New York City](https://thesciencesurvey.com/news/2021/03/21/the-rise-of-citi-bikes-in-new-york-city/)

</b>

### **PART 2 - Loading the data**

First things first, let's get access to the data.  To do that, we need to link this notebook with out Google Drive.  On the left there is a folder icon.  **Click that and in the popout menu click "Mount Drive" (i.e., the folder with the Google Drive icon).**  This will create a cell of code for you to run.  **Follow the instructions to link this notebook with your Google Drive.**
"""

from google.colab import drive
drive.mount('/content/drive')

"""In the menu on the left, **click the `drive` folder <small>(nb., you may need to click the folder with the refresh icon to see your `drive` folder)</small>, then `Shareddrives`, then locate the shared `mlpp25` directory**.  Inside of that is a directory called `data` and inside that is a directory called `citibike`.  In that folder is the citibike data.  **Right click on the file and select "copy path".  Put that path to the file into a string variable called `fname` and use pandas `read_csv()` function to load the data (no need to skip rows) into a pandas DataFrame called `citi`.**"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

fname="/content/drive/Shareddrives/mlpp25/data/citibike/JC-201604-citibike-tripdata.csv"
citibike_data=pd.read_csv(fname)
citibike_data

"""### **PART 3 - Calculate useful metrics**

Our end goal is to get an estimate of what age riders are using citi bikes for commuter travel the most.  <u>We're going to do that by separating the trips into short and long trips and then finding the age that has the highest fraction of short trips.</u>

Let's convert a couple columns of data into some quantities that will be useful in our model below.

First, use the values from the "Birth Year" column to **calculate the age of the rider.  Add those values as a column called "age" in your `citi` DataFrame**.
"""

citibike_data['Age']=2016-citibike_data['Birth Year']
citibike_data

"""Now, extract the "Trip Duration" column (the units of which are seconds) and **take the logarithm of those using numpy's `log10()` function$^{\dagger}$.  Put them into a column in `citi` called "logdur".**

<i><small>$^{\dagger}$ recall that log10(x) = y where 10<sup>y</sup> = x, so if a trip duration is `t` = 100 seconds, `np.log10(t)` = 2 since 10<sup>2</sup> = 100.</small>
"""

citibike_data['logdur']=np.log10(citibike_data['Trip Duration'])
citibike_data

"""### **PART 4 - Visualize the data and update metrics**

Since we're interested in trip durations, **use `citi`'s `.hist()` method to plot a histogram of the "Trip Duration" column of the data setting the range from 0 to 10000 seconds and using 100 bins**.
"""

citibike_data["Trip Duration"].hist(bins=100, range=(0, 10000))

"""**Would you characterize this distribution as "Gaussian"?  Why or why not?**

Gaussian distribution is nothing but the normal distribution. It is usually symmetric and bell shaped. Here, it can be observed that it is not gaussian, as the graph has positive skewness, i.e., there is long tail towards right. This implies that there are fewer long trips and more shorter trips.

Now, **plot a histogram with 100 bins (no need to set the range) of the logarithm of the trip durations that you calculated above**.
"""

citibike_data["logdur"].hist(bins=100)

"""**Would you characterize this distribution as Gaussian?  Why or why not?**

It can be observed that there is a bell shaped curve and it is almost symmetric. So, it mostly looks like a Gaussian distribution, though there is slightly positive skewness.

The previous plot might give you a sense for how to break up the rides into "short" and "long" rides (which we'll use as a proxy for "commuter" and "recreational" respectively).  **Calculate the median of the logarithm of the trip duration.**
"""

median_logdur = citibike_data["logdur"].median()
print(f"Median: {median_logdur}")

"""We'll use this as the short/long dividing line.  **What is the duration of this trip in minutes?  Does that seem like a resonable time for commuting?  How far would you get in that time biking at 10 mph (and is that a reasonable biking speed)?**"""

# Here the median of logdur is 2.6138418218760693.
# This is log of actual trip in seconds.
# To understand the duration of this trip in minutes, we need to raise this value to the power of 10
# (as we have used base 10 for converting it into log), and then divide by 60 to get the time in minutes.

median_trip_duration_minutes = 10**median_logdur / 60
print(f"Median trip duration in minutes: {median_trip_duration_minutes:.2f}")

"""It can be seen that the duration of trip in minutes is 6.8500000000000005. This seems like a reasonable time for commuting for shorter trips, like moving in neighborhoods."""

# Given 10mph as speed, the distance travelled in that time duration can be calculated with the formula
# [distance = speed*time].
# Here the time is in minutes, so we need to divide time (in min) by 60 to get the time in hours;
# as the speed is given in miles per hour (mph).

distance = 10 * median_trip_duration_minutes / 60
print(f"Distance travelled in {median_trip_duration_minutes:.2f} minutes is {distance:.2f} miles")

"""**Add two columns to your `citi` dataframe: a column called "short_trip" that is `True` when the trip duration is less than dividing line above and `False` otherwise, and a column called "long_trip" that is `True` when the duration is greater than or equal to the dividing line above but `False` otherwise.**"""

citibike_data['short_trip'] = citibike_data['logdur']< median_logdur
citibike_data['long_trip'] = citibike_data['logdur']>= median_logdur
citibike_data

"""Now, we're going to use a pandas dataframe trick that is quite useful (and related to similar functionality in other data analysis software) to "group" the data "by" the age using `citi`'s `.groupby()` method.  It also needs a function to perform on the groups which outputs another data frame.  If you've accomplished the above correctly, this line of code should execute without an error:"""

citig = citibike_data.groupby("Age").sum()
citig

"""This new dataframe should now have an index that is the age groups and two columns (called "short_trip" and "long_trip") that are the sums of short and long trips for that age group.  **Get the total number of trips for that age group by adding those together.**"""

citig['total_trips']=citig['short_trip']+citig['long_trip']
citig.head()

"""**Plot the fraction of trips that are short as a function of age group.**$^{\dagger}$

<small>$^{\dagger}$ you can access the index values of a dataframe like so: `age_group = citig.index`</small>
"""

#plotting fraction of trips that are short as a function of age group.
citig["shortTrip_frac"] = citig["short_trip"]/citig["total_trips"]

#Here, after the new data frame is created by grouping the data by age, there is no age column now, it acts as an index in the new data frame
age_group = citig.index
plt.plot(age_group, citig["shortTrip_frac"])

plt.xlabel("Age")
plt.ylabel("Fraction of trips that are short")
plt.title("Fraction of trips that are short as a function of age group")
plt.show()

"""**What is the age group that is predominantly using citi bikes for commuting?  How did you make that determination?**

It can be observed that the fraction of short trips by age group is highest for the age group of 75. Therefore, 75 is the age group is predominantly using citi bikes for commuting.

**What are the assumptions that went into finding this model?  And how do your findings relate to the information in the resources in Part 1?**

The assumptions that went into finding this model:

1. We assumed that short trips are primarily used for commuting rather than recreational purposes. As the commuting time required for moving in the neighborhood or between stores or workplace typically requires less than 20min.
2. It was also assumed that different age groups might have different biking habits, like older people using Citi Bikes more for practical commuting.
3. We assumed the data is accurate and free of significant errors.
4. It was assumed that the data we analyzed reflects the actual patterns of Citi Bike use in New York City.

These assumptions align with insights from the Citi Bike program's growth in NYC, as seen in the official Citi Bike site and DOT Facts. It was said that biking has become increasingly popular across all age groups due to its convenience and environmental benefits.
The trend observed in the analysis, where older age groups are using Citi Bikes for commuting, fits with broader patterns in the city, where bikes are becoming a favored choice for short-distance travel, especially for those who might avoid heavier traffic or public transport, and is less risky compared to other commuting vehicles.

### **EXTRA CREDIT - Fit a model parameter by hand (aka: "fit by eye")**

Let's approximate the number of short trips as a function of age group by a parabola.  Here's the function we'll use:
"""

def short_by_age(age_groups, peak_age, peak_value):
  """
  Generate a model for the fraction of trips that are short as a
  function of age group.
  """

  model = -6e-4 * (age_groups - peak_age)**2 + peak_value

  return model

import matplotlib.pyplot as plt
import numpy as np



age_group = citig.index
short_trip_frac = citig['shortTrip_frac']

# Try an initial guess
peak_age = 45          # Try adjusting this
peak_value = 0.65      # Try adjusting this too

# Define the model function
def short_by_age(age_groups, peak_age, peak_value):
    model = -6e-4 * (age_groups - peak_age)**2 + peak_value
    return model

# Get modeled values
model_vals = short_by_age(age_group, peak_age, peak_value)

# Plot actual data vs model
plt.plot(age_group, short_trip_frac, label="Actual", marker='o')
plt.plot(age_group, model_vals, label="Parabolic Fit", linestyle='--')
plt.xlabel("Age")
plt.ylabel("Fraction of trips that are short")
plt.title("Fraction of Short Trips by Age Group")
plt.legend()
plt.grid(True)
plt.show()

"""**Use the above function to fit the `peak_age` and `peak_value` parameters "by eye".**  By that I mean, choose some values, plot it, chose a new value and plot it to see if it fits better by eye, then repeat until you have something that looks reasonable."""
# -*- coding: utf-8 -*-
"""(3)BasicStatisticsExample_CitiBikeRidership.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1aRroJM78bvY3RVOEUw_jy-DqH6mpvsXl

## **MLPP25 // Basic Statistics Example: CitiBike Ridership**

*Feb 11, 2025*

This notebook will go through the calculation of basic descriptive statistics using the CitiBike data as an example.

---
"""

# -- mount Google Drive

from google.colab import drive
drive.mount('/content/drive')

# -- import necessary modules
import pandas as pd
import plotly.express as px #for plotting interactively
import numpy as np #another way to calculate statistics quickly

# -- set the file name path
fname = "/content/drive/Shareddrives/mlpp25/data/citibike/JC-201604-citibike-tripdata.csv"

# -- load the data
data = pd.read_csv(fname)

data

"""NOTES
- Whenever you get data, if the data is numeric, just plot that data somehow - column vs column, histogram or something
- if you have non-numeric data, plot like a bar chart
- plotting the data is the only way to get a sense of the data that you have.

PLOTTING METHODS
- The most important plotting module inside of Python - Matplotlib
- Another method - plotting directly from the dataframe - data.plot
- most plotting libraries are wrapping around matplotlib. matplotlib is extremely flexible
- There is interactive plotting method - plotly express
"""

# -- make an interactive histogram of Birth Year
fig = px.histogram(data, x="Birth Year", color_discrete_sequence=["black"], opacity=0.7, width=800)
fig.update_layout(yaxis_title="Number of Riders")
fig.show()

"""Histogram- takes all the values, creates a bunch of evenly spaced bins and takes each value to see which bin does it fall in. It also keeps a running count like total number of riders here.

INFERENCES FROM THE HISTOGRAM
- it is not gaussian - it has skewness - long tail towards left.
"""

# -- calculate the mean (average) Birth Year using NumPy's mean() function
avg_np = np.mean(data["Birth Year"])
avg_np

# -- calculate the mean (average) Birth Year using the .mean() method of the Series
avg = data["Birth Year"].mean() #built-in function
avg

# -- calculate the median Birth Year using NumPy's median() function
med_np = np.median(data["Birth Year"])
med_np

"""If atleast of the values has Nan, the median is Nan

"""

# -- calculate the median Birth Year using the .median() method of the Series
med = data["Birth Year"].median()
med

"""In this case, Nans are ignored."""

# -- calculate the standard deviation of Birth Year using the .std() method of the Series
sig = data["Birth Year"].std()
sig

"""The characteristic spread is about 9.51 years"""

# -- print the range of the Birth Year using the .min() and .max() methods of the Series
lo = data["Birth Year"].min()
hi = data["Birth Year"].max()
print("Birth Year range : {0}".format((lo, hi)))

# -- determine number of stations using NumPy's unique() function
lons = np.unique(data["Start Station Longitude"])

print("Unique station longitudes : \n{0}".format(lons))
print("Number of stations : {0}".format(len(lons)))

# -- determine number of stations using the DataFrame's .unique() function
lats =  np.unique(data["Start Station Latitude"])

print("Unique station longitudes : \n{0}".format(lats))
print("Number of stations : {0}".format(len(lats)))

lon=data["Start Station Longitude"].unique() #using built-in function
lat=data["Start Station Latitude"].unique()
print(lon)
print(lat)

